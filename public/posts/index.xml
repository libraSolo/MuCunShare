<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - 我的新Hugo网站</title>
        <link>http://localhost:1313/posts/</link>
        <description>All Posts | 我的新Hugo网站</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 26 Feb 2025 16:21:57 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/posts/" rel="self" type="application/rss+xml" /><item>
    <title>微服务_ETCD</title>
    <link>http://localhost:1313/%E5%BE%AE%E6%9C%8D%E5%8A%A1_etcd/</link>
    <pubDate>Wed, 26 Feb 2025 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/%E5%BE%AE%E6%9C%8D%E5%8A%A1_etcd/</guid>
    <description><![CDATA[<h1 id="etcd-学习笔记"><strong>ETCD 学习笔记</strong></h1>
<h2 id="etcd-介绍"><strong>ETCD 介绍</strong></h2>
<p>ETCD 是一个 <strong>分布式</strong> 的、高可用的键值存储系统，它主要用于 <strong>共享配置</strong> 和 <strong>服务发现</strong>。ETCD 基于 Raft 一致性算法，保证了数据的强一致性。ETCD 的 API 是基于HTTP的。</p>
<h3 id="etcd-能力和作用"><strong>ETCD 能力和作用</strong></h3>
<ol>
<li>ETCD 集群中，多节点数据的强一致性。
<ul>
<li>Raft 算法：基于 Raft 协议实现多节点数据一致性，确保读写操作的线性一致性。</li>
<li>Leader 选举：自动选举 Leader 节点处理写请求，Follower 节点同步数据，保证集群高可用。</li>
</ul>
</li>
<li>提供监听机制，用于监听和推送变更。
<ul>
<li>客户端可监听键值的变化（如配置更新、服务上下线），实时推送变更事件。</li>
</ul>
</li>
<li>服务注册发现，提供 key 的过期和续约机制。
<ul>
<li>为键值绑定租约，自动删除过期数据（如服务心跳检测）。</li>
<li>客户端可续约（KeepAlive）维持键的生命周期。</li>
</ul>
</li>
<li>ETCD 提供了数据的安全存储和加密传输，确保数据的安全性。
<ul>
<li>TLS 加密：支持客户端与集群间通信加密。</li>
<li>RBAC 权限：基于角色的访问控制，限制用户或应用的读写权限。</li>
</ul>
</li>
<li>ETCD 支持数据的版本控制和历史记录，方便数据的回退和追溯。</li>
<li>ETCD 的数据模型是基于键值对的，支持范围查询和前缀查询，方便数据的检索和过滤。</li>
<li>ETCD 提供了多种编程语言的客户端库，方便开发者在不同的语言环境下使用 ETCD。</li>
</ol>
<h3 id="etcd-与其他系统的对比"><strong>ETCD 与其他系统的对比</strong></h3>
<table>
  <thead>
      <tr>
          <th><strong>特性</strong></th>
          <th><strong>ETCD</strong></th>
          <th><strong>ZooKeeper</strong></th>
          <th><strong>Consul</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>一致性协议</strong></td>
          <td>Raft</td>
          <td>ZAB</td>
          <td>Raft</td>
      </tr>
      <tr>
          <td><strong>数据模型</strong></td>
          <td>层级键值</td>
          <td>树形节点（ZNode）</td>
          <td>键值、服务发现</td>
      </tr>
      <tr>
          <td><strong>Watch 机制</strong></td>
          <td>基于键范围的事件监听</td>
          <td>单节点监听</td>
          <td>支持服务健康检查</td>
      </tr>
      <tr>
          <td><strong>运维复杂度</strong></td>
          <td>较低（Go 编写）</td>
          <td>较高（Java 依赖 JVM）</td>
          <td>中等</td>
      </tr>
      <tr>
          <td><strong>云原生集成</strong></td>
          <td>Kubernetes 默认</td>
          <td>较少</td>
          <td>支持但非主流</td>
      </tr>
      <tr>
          <td><strong>性能</strong></td>
          <td>高吞吐、低延迟</td>
          <td>中等</td>
          <td>中等</td>
      </tr>
      <tr>
          <td><strong>安全性</strong></td>
          <td>支持 TLS、RBAC</td>
          <td>支持 ACL</td>
          <td>支持 ACL、TLS</td>
      </tr>
      <tr>
          <td><strong>适用场景</strong></td>
          <td>服务发现、配置管理、分布式锁</td>
          <td>分布式协调、配置管理</td>
          <td>服务发现、健康检查</td>
      </tr>
  </tbody>
</table>
<h2 id="etcd-常用命令"><strong>ETCD 常用命令</strong></h2>]]></description>
</item>
<item>
    <title>浅析 Git 和 SVN</title>
    <link>http://localhost:1313/%E6%B5%85%E6%9E%90-git-%E5%92%8C-svn/</link>
    <pubDate>Tue, 03 Sep 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/%E6%B5%85%E6%9E%90-git-%E5%92%8C-svn/</guid>
    <description><![CDATA[<h1 id="浅析-git-和-svn">浅析 Git 和 SVN</h1>
<h1 id="浅析-git-和-svn-1"><strong>浅析 Git 和 SVN</strong></h1>
<h2 id="git-vs-svn"><strong>Git vs SVN</strong></h2>
<p><strong><strong>Git 是分布式</strong></strong> ( 可以离线工作) ， <strong>SVN 是集中式</strong> ( 需要联网工作 ) 。</p>
<p><strong><strong>Git 有本地分支且 Git 分支是 ‘ 指针指向某次提交 ’</strong></strong> ( 分支廉价 )</p>
<p><strong><strong>SVN 无本地分支且 SVN 分支是 ‘ 拷贝的目录 ’</strong></strong> ( 分支昂贵 )</p>
<hr>
<h2 id="svn-核心思维"><strong>SVN 核心思维</strong></h2>
<p><strong>SVN = 版本控制 + 备份服务器</strong></p>
<p></p>
<p>SVN 是集中版本控制工具，多用户共享<strong>同一</strong>资源，并且可以对资源进行修改和更新。Repository 收到用户 commit 时，会记录更改资源的人和版本的更新，所以可以<strong>恢复到之前记录的修改点</strong> ( 回滚版本 )</p>
<hr>
<h3 id="svn-操作流程"><strong>SVN 操作流程</strong></h3>
<p></p>]]></description>
</item>
<item>
    <title>数据库_Redis</title>
    <link>http://localhost:1313/%E6%95%B0%E6%8D%AE%E5%BA%93_redis/</link>
    <pubDate>Mon, 02 Sep 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/%E6%95%B0%E6%8D%AE%E5%BA%93_redis/</guid>
    <description><![CDATA[<h1 id="数据库_redis">数据库_Redis</h1>
<h1 id="redis">Redis</h1>
<p>Redis 是一个开源的内存数据储存系统，它可以用于数据库、缓存和消息中间件。</p>
<h2 id="优点">优点</h2>
<ol>
<li>高性能缓存</li>
<li>数据持久化</li>
<li>分布式缓存</li>
<li>发布订阅消息系统</li>
</ol>
<h2 id="数据类型">数据类型</h2>
<ul>
<li>String</li>
<li>Hash</li>
<li>List</li>
<li>Set</li>
<li>Zset (有序集合)</li>
</ul>
<p>新增</p>
<ul>
<li>BitMap</li>
<li>HyperLogLog</li>
<li>GEO</li>
<li>Strean</li>
</ul>
<h2 id="过期时间">过期时间</h2>
<p></p>
<h3 id="过期机制的思路">过期机制的思路</h3>
<ul>
<li>定时删除：计时器，到期删除。</li>
<li>延迟队列：使用一个延迟队列，从中取出来这个对象时，就已经过期，可以删除。</li>
<li>懒惰删除：每次使用时检查是否过期。</li>
<li>定期删除：每隔一段时间就遍历对象，找到过期并删除。</li>
</ul>
<p></p>
<h3 id="qa为什么不立刻删除">QA:为什么不立刻删除？</h3>
<p>理论上来说，并不是做不到，只不过代价比较高昂不值得而已。
最简单的做法就是使用定时器，但是定时器本身开销太大，还得考虑在更新过期时间的时候重置定时器。另外一种思路就是使用延迟队列，但是延迟队列本身开销也很大，修改过期时间也要调整延迟队列，还要引入大量的并发控制。
综合来看，并不值得。而定期删除和懒惰删除的策略虽然看上去可能浪费内存，但是这个浪费很少，并且对响应时间也没那么大的影响。</p>
<h3 id="qa-redis-是怎么控制定期删除开销的">QA: Redis 是怎么控制定期删除开销的？</h3>
<p>在每一个定期删除循环中，Redis 会遍历 DB。如果这个 DB 完全没有设置了过期时间的 key，那就直接跳过。否则就针对这个 DB 抽一批 key，如果 key 已经过期，就直接删除。
如果在这一批 key 里面，过期的比例太低，那么就会中断循环，遍历下一个 DB。如果执行时间超过了阈值，也会中断。不过这个中断是整个中断，下一次定期删除的时候会从当前 DB 的下一个继续遍历。
总的来说，<strong>Redis 是通过控制执行定期删除循环时间来控制开销</strong> ，这样可以在服务正常请求和清理过期 key 之间取得平衡。</p>]]></description>
</item>
<item>
    <title>数据库_MySQL</title>
    <link>http://localhost:1313/%E6%95%B0%E6%8D%AE%E5%BA%93_mysql%E9%97%AE%E9%A2%98/</link>
    <pubDate>Sun, 01 Sep 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/%E6%95%B0%E6%8D%AE%E5%BA%93_mysql%E9%97%AE%E9%A2%98/</guid>
    <description><![CDATA[<h1 id="数据库_mysql">数据库_MySQL</h1>
<h1 id="索引">索引</h1>
<p></p>
<h2 id="索引的分类">索引的分类</h2>
<ul>
<li>按照索引结构
<ol>
<li>B 树索引
<ul>
<li>使用 B / B+ 树结构，高效的查找、插入和删除。</li>
<li>适用于范围查询。</li>
</ul>
</li>
<li>哈希索引
<ul>
<li>使用哈希表实现，查找速度很快，不支持范围查询。</li>
<li>适用于查找特定的值。</li>
</ul>
</li>
<li>位图索引
<ul>
<li>使用位图表示数据，适用于不同值较少的列</li>
<li>适用于大规模查询。</li>
</ul>
</li>
</ol>
</li>
<li>按照索引的使用方式
<ol>
<li>主键索引
<ul>
<li>基于表的主键创建的索引，自动创建，确保主键唯一性。</li>
</ul>
</li>
<li>唯一索引
<ul>
<li>确保索引列中的值唯一，不能包含重复值。</li>
<li>可以用于非主键列。</li>
</ul>
</li>
<li>普通索引
<ul>
<li>没有唯一性，可以包含重复值。</li>
<li>增加查询速度，不保证唯一性。</li>
</ul>
</li>
<li>复合索引
<ul>
<li>由多个列组成的索引，支持多列查询。</li>
<li>提高查询的复杂性。</li>
</ul>
</li>
<li>前缀索引
<ul>
<li>包含某个列的前一部分。</li>
<li>适用于储存字符/字节的列。</li>
</ul>
</li>
<li>覆盖索引
某个索引包含某个查询的所有列。</li>
</ol>
</li>
<li>按照储存方式
<ol>
<li>聚集索引
<ul>
<li>数据存储顺序与索引顺序相同，表中的数据行按照索引的顺序排列。</li>
<li>每个表只能有一个聚集索引，因为数据行只能按一种方式存储。</li>
</ul>
</li>
<li>非聚集索引
<ul>
<li>索引与数据存储分开，索引包含指向数据行的指针。</li>
<li>一个表可以有多个非聚集索引。</li>
</ul>
</li>
</ol>
</li>
<li>特殊类型
<ol>
<li>全文索引
<ul>
<li>专门用于文本搜索，支持对文本数据进行复杂查询。</li>
<li>常用于搜索引擎和内容管理系统。</li>
</ul>
</li>
<li>空间索引
<ul>
<li>用于地理信息系统（GIS）中的空间数据查询。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="索引的代价">索引的代价</h2>
<ol>
<li>索引本身需要存储起来，消耗磁盘空间。</li>
<li>运行时，索引会加载到内存中，消耗内存空间。</li>
<li>增删改的时候，同步维护索引，引入额外的消耗。</li>
</ol>
<h2 id="b-树的优势">B+ 树的优势</h2>
<ol>
<li>B+ 树的高度更低，所以查询耗时更少，性能更好。</li>
<li>B+ 树的叶子节点被串联起来了，更适合范围查询。</li>
<li>B+ 树的非叶子节点没有存放数据，所以可以放在<strong>内存</strong>中，查询性能更好。</li>
</ol>
<h2 id="qa数据库索引为什么用-b-树">QA:数据库索引为什么用 B+ 树</h2>
<p>与 B+ 树相比，<strong>平衡二叉树</strong>、<strong>红黑树</strong>在同等数据量下，高度更高，性能更差，而且它们会频繁执行再平衡过程，来保证树形结构平衡。</p>]]></description>
</item>
<item>
    <title>Go并发_基本并发原语_WaitGroup</title>
    <link>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADwaitgroup/</link>
    <pubDate>Thu, 15 Aug 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADwaitgroup/</guid>
    <description><![CDATA[<h1 id="go并发_基本并发原语_waitgroup">Go并发_基本并发原语_WaitGroup</h1>
<h1 id="waitgroup-协同等待任务编排利器">WaitGroup (协同等待，任务编排利器)</h1>
<h2 id="方法">方法</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">delta</span> <span class="kt">int</span><span class="p">)</span> <span class="c1">// 用来设置 WaitGroup 的计数值</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="nf">Done</span><span class="p">()</span>         <span class="c1">// 用来将 WaitGroup 的计数值减 1，其实就是调用了 Add(-1)</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="nf">Wait</span><span class="p">()</span>         <span class="c1">// 调用这个方法的 goroutine 会一直阻塞，直到 WaitGroup 的计数值变为 0</span></span></span></code></pre></div></div><h2 id="基本使用">基本使用</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">WaitGroup</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 避免复制使用的一个技巧，可以告诉vet工具违反了复制使用的规则</span>
</span></span><span class="line"><span class="cl">    <span class="nx">noCopy</span> <span class="nx">noCopy</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 64bit(8bytes)的值分成两段，高32bit是计数值，低32bit是waiter的计数</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 另外32bit是用作信号量的</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 因为64bit值的原子操作需要64bit对齐，但是32bit编译器不支持，所以数组中的元素在不同的架构中不一样，具体处理看下面的方法</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 总之，会找到对齐的那64bit作为state，其余的32bit做信号量</span>
</span></span><span class="line"><span class="cl">    <span class="nx">state1</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="kt">uint32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 得到state的地址和信号量的地址</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">WaitGroup</span><span class="p">)</span> <span class="nf">state</span><span class="p">()</span> <span class="p">(</span><span class="nx">statep</span> <span class="o">*</span><span class="kt">uint64</span><span class="p">,</span> <span class="nx">semap</span> <span class="o">*</span><span class="kt">uint32</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">uintptr</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">.</span><span class="nx">state1</span><span class="p">))</span><span class="o">%</span><span class="mi">8</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果地址是64bit对齐的，数组前两个元素做state，后一个元素做信号量</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="kt">uint64</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">.</span><span class="nx">state1</span><span class="p">)),</span> <span class="o">&amp;</span><span class="nx">wg</span><span class="p">.</span><span class="nx">state1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果地址是32bit对齐的，数组后两个元素用来做state，它可以用来做64bit的原子操作，第一个元素32bit用来做信号量</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="kt">uint64</span><span class="p">)(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Pointer</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">.</span><span class="nx">state1</span><span class="p">[</span><span class="mi">1</span><span class="p">])),</span> <span class="o">&amp;</span><span class="nx">wg</span><span class="p">.</span><span class="nx">state1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div><p>64 位环境下：waiter 数 | WaitGroup 的计数值 | 信号量
32 位环境下：信号量 | waiter 数 | WaitGroup 的计数值</p>]]></description>
</item>
<item>
    <title>Go并发_基本并发原语_RWMutex</title>
    <link>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADrwmutex/</link>
    <pubDate>Wed, 14 Aug 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADrwmutex/</guid>
    <description><![CDATA[<h1 id="go并发_基本并发原语_rwmutex">Go并发_基本并发原语_RWMutex</h1>
<h1 id="rwmutex">RWMutex</h1>
<p></p>
<p><strong>概念</strong>：RWMutex 在某一时刻只能由任意数量的 reader 持有，或者是只被单个的 writer 持有。</p>
<p><strong>方法</strong>：</p>
<ul>
<li><strong>Lock/Unlock</strong>: 如果锁已经被 reader 或者 writer 持有，那么，Lock 方法会一直阻塞，直到能获取到锁；Unlock 则是配对的释放锁的方法。</li>
<li><strong>RLock/Unlock</strong>：如果锁已经被 writer 持有的话，RLock 方法会一直阻塞，直到能获取到锁，否则就直接返回；而 RUnlock 是 reader 释放锁的方法。</li>
<li><strong>Rlocker</strong>：这个方法的作用是为读操作返回一个 Locker 接口的对象。它的 Lock 方法会调用 RWMutex 的 RLock 方法，它的 Unlock 方法会调用 RWMutex 的 RUnlock 方法。</li>
<li><strong>TryRLock/TryLock</strong>: 尝试获取，同 Mutex。</li>
</ul>
<p>其他用法和注意和 Mutex 相似。</p>
<h2 id="常见问题">常见问题</h2>
<ol>
<li><strong>Read-preferring</strong>：读优先的设计可以提供很高的并发性，但是，在竞争激烈的情况下可能会导致写饥饿。</li>
<li><strong>Write-preferring</strong>：避免写饥饿，阻塞的是新来 reader， 让已经在工作的 reader 工作完成。</li>
<li><strong>不指定优先级</strong>：平等对待，解决饥饿。</li>
</ol>
<p><strong>Go 标准库中的 RWMutex 设计是 Write-preferring 方案。一个正在阻塞的 Lock 调用会排除新的 reader 请求到锁。</strong></p>]]></description>
</item>
<item>
    <title>Go并发_基本并发原语_Pool</title>
    <link>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADpool/</link>
    <pubDate>Tue, 13 Aug 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADpool/</guid>
    <description><![CDATA[<h1 id="go并发_基本并发原语_pool">Go并发_基本并发原语_Pool</h1>
<h1 id="pool">Pool</h1>
<p></p>
<p>sync.Pool 用与缓存<strong>临时</strong>使用的对象，避免反复创建带来的性能损耗。所以如果没有别的对象引用，会被垃圾回收掉。</p>
<h2 id="特性">特性</h2>
<ol>
<li>sync.Pool 本身就是线程安全的，多个 goroutine 可以并发地调用它的方法存取对象</li>
<li>sync.Pool 不可在使用之后再复制使用。</li>
</ol>
<h2 id="方法">方法</h2>
<p>New、Get 和 Put。</p>
<ol>
<li>New
Pool struct 包含一个 New 字段，这个字段的类型是函数 func() interface{}。当调用 Pool 的 Get 方法从池中获取元素，没有更多的空闲元素可返回时，就会调用这个 New 方法来创建新的元素。如果你没有设置 New 字段，没有更多的空闲元素可返回时，Get 方法将返回 nil，表明当前没有可用的元素。</li>
<li>Get
从 Pool 取走一个元素，从 Pool 移除并返回。可能为 nil（Pool.New 字段没有设置，又没有空闲元素可以返回）。</li>
<li>Put
将一个元素提交个 Pool， 提交一个 nil 值，直接忽略。</li>
</ol>
<h2 id="原理">原理</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Pool</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">noCopy</span> <span class="nx">noCopy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">local</span>     <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// local fixed-size per-P pool, actual type is [P]poolLocal</span>
</span></span><span class="line"><span class="cl">	<span class="nx">localSize</span> <span class="kt">uintptr</span>        <span class="c1">// size of the local array</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">victim</span>     <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// local from previous cycle</span>
</span></span><span class="line"><span class="cl">	<span class="nx">victimSize</span> <span class="kt">uintptr</span>        <span class="c1">// size of victims array</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">New</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">any</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div><p>在 STW 时，victim 被清空，local 赋值给 victim，local 置为 nil，Get 取值的时候是从 victim 中获取。</p>]]></description>
</item>
<item>
    <title>Go并发_基本并发原语_Once</title>
    <link>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADonce/</link>
    <pubDate>Mon, 12 Aug 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADonce/</guid>
    <description><![CDATA[<h1 id="go并发_基本并发原语_once">Go并发_基本并发原语_Once</h1>
<h1 id="once">Once</h1>
<p></p>
<p>Once 常常用来初始化单例资源，或者并发访问只需初始化一次的共享资源，或者在测试的时候初始化一次测试资源。</p>
<h2 id="方法">方法</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">Once</span><span class="p">)</span> <span class="nf">Do</span><span class="p">(</span><span class="nx">f</span> <span class="kd">func</span><span class="p">())</span></span></span></code></pre></div></div><p>可以多次调用 Do 方法，但是只有第一次调用 Do 方法时 f 参数才会执行，这里的 f 是一个无参数无返回值的函数。</p>
<h2 id="常见错误-罕见">常见错误 （罕见）</h2>
<h3 id="1-死锁">1. 死锁</h3>
<p>Do 方法会执行一次 f，但是如果 f 中再次调用这个 Once 的 Do 方法的话，就会导致死锁的情况出现。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">once</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl">    <span class="nx">once</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">once</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;初始化&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div><h3 id="2未初始化">2.未初始化</h3>
<p>如果执行 f 的时候 panic，未初始化成功，但是 Once 依旧认为执行成功，不会再次执行 f。</p>]]></description>
</item>
<item>
    <title>Go并发_基本并发原语_Mutex</title>
    <link>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADmutex/</link>
    <pubDate>Sun, 11 Aug 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADmutex/</guid>
    <description><![CDATA[<h1 id="go并发_基本并发原语_mutex">Go并发_基本并发原语_Mutex</h1>
<h1 id="mutex-互斥锁排他锁">Mutex (互斥锁/排他锁)</h1>
<p></p>
<p><strong>临界区</strong> ： 在并发编程中，如果程序中的一部分会被并发访问或修改，这部分程序需要被保护起来，这部分被保护起来的程序，就叫做临界区。</p>
<p><strong>适用场景</strong> ：</p>
<ol>
<li>共享资源</li>
<li>任务编排</li>
<li>消息传递</li>
</ol>
<p><strong>检测工具</strong>：Go race detector (在运行时，触发才可以检测)</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="err">$</span> <span class="k">go</span> <span class="nx">test</span> <span class="o">-</span><span class="nx">race</span> <span class="nx">mypkg</span>    <span class="c1">// test the package</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="k">go</span> <span class="nx">run</span> <span class="o">-</span><span class="nx">race</span> <span class="nx">mysrc</span><span class="p">.</span><span class="k">go</span>  <span class="c1">// compile and run the program</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="k">go</span> <span class="nx">build</span> <span class="o">-</span><span class="nx">race</span> <span class="nx">mycmd</span>   <span class="c1">// build the command</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="k">go</span> <span class="nx">install</span> <span class="o">-</span><span class="nx">race</span> <span class="nx">mypkg</span> <span class="c1">// install the package</span></span></span></code></pre></div></div><h2 id="mutex-的基本使用">Mutex 的基本使用</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Mutex</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nx">state</span> <span class="kt">int32</span>
</span></span><span class="line"><span class="cl"> <span class="nx">sema</span> <span class="kt">uint32</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// state 字段被分为 4 部分</span>
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mutexLocked</span>           <span class="p">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="kc">iota</span> <span class="c1">// 持有锁的标记</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mutexWoken</span>                        <span class="c1">// 唤醒标记</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mutexStarving</span>                     <span class="c1">// 饥饿标记</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mutexWaiterShift</span>      <span class="p">=</span> <span class="kc">iota</span>      <span class="c1">// 阻塞等待的 waiter 数量,其最大为 2^(32-3)-1</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div></div><p>方法：</p>]]></description>
</item>
<item>
    <title>Go并发_基本并发原语_Context</title>
    <link>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcontext/</link>
    <pubDate>Sat, 10 Aug 2024 16:21:57 &#43;0800</pubDate>
    <author>木村凉太</author>
    <guid>http://localhost:1313/go%E5%B9%B6%E5%8F%91%E5%9F%BA%E6%9C%AC%E5%B9%B6%E5%8F%91%E5%8E%9F%E8%AF%ADcontext/</guid>
    <description><![CDATA[<h1 id="go并发_基本并发原语_context">Go并发_基本并发原语_Context</h1>
<h1 id="context">Context</h1>
<p>上下文联系。</p>
<p></p>
<h2 id="使用场景">使用场景</h2>
<ol>
<li>上下文信息传递 （request-scoped），比如处理 http 请求、在请求处理链路上传递信息</li>
<li>控制子 goroutine 的运行</li>
<li>超时控制调用</li>
<li>取消的方法调用</li>
</ol>
<h2 id="基本使用">基本使用</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-chevron-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Context</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Deadline</span><span class="p">()</span> <span class="p">(</span><span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">ok</span> <span class="kt">bool</span><span class="p">)</span> <span class="c1">// 方法会返回这个 Context 被取消的截止日期。如果没有设置截止日期，ok 的值是 false。</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Done</span><span class="p">()</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>                   <span class="c1">// 方法返回一个 Channel 对象。在 Context 被取消时，此 Channel 会被 close，如果没被取消，可能会返回 nil。</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Err</span><span class="p">()</span> <span class="kt">error</span>                              <span class="c1">//</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Value</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kd">interface</span><span class="p">{}</span>       <span class="c1">// 返回此 ctx 中和指定的 key 相关联的 value。</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div><h3 id="生成顶层-context-的方法">生成顶层 Context 的方法、</h3>
<ul>
<li>context.Background()：返回一个非 nil 的、空的 Context，没有任何值，不会被 cancel，不会超时，没有截止日期。一般用在主函数、初始化、测试以及创建根 Context 的时候。</li>
<li>context.TODO()：Background() 的别名，不知道用啥或者不知道什么上下文用这个。</li>
</ul>
<h3 id="默认原则">默认原则</h3>
<ol>
<li>一般函数使用 Context 的时候，会把这个参数放在第一个参数的位置。</li>
<li>从来不把 nil 当做 Context 类型的参数值，可以用 context.TODO()。</li>
<li>Context 只用来临时做函数之间的上下文透传，不能持久化 Context 或者把 Context 长久保存。</li>
<li><strong>key 的类型不应该是字符串类型或者其它内建类型，否则容易在包之间使用 Context 时候产生冲突。使用 WithValue 时，key 的类型应该是自己定义的类型。</strong></li>
<li>常常使用 struct{}作为底层类型定义 key 的类型。对于 exported key 的静态类型，常常是接口或者指针。这样可以尽量减少内存分配。</li>
</ol>
<h3 id="withvalue">WithValue</h3>
<p>它持有一个 key-value 键值对，还持有 parent 的 Context。它覆盖了 Value 方法，优先从自己的存储中检查这个 key，不存在的话会从 parent 中继续检查，链式查找。</p>]]></description>
</item>
</channel>
</rss>
